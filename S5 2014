import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;


public class S52014 {

	public static Scanner scan = new Scanner(System.in);
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Point origin = new Point();
		origin.x = 0;
		origin.y = 0;
		int n = scan.nextInt();
		Point[] p  = new Point[n + 1];
		p[0] = origin;
		for(int i = 1; i <= n; i ++){
			Point next = new Point();
			next.x = scan.nextInt();
			next.y = scan.nextInt();
			p[i] = next;
		}
		ArrayList<int[]> pair = new ArrayList<int[]>();
		for(int i = 0; i < n + 1; i ++){
			for(int j = i + 1; j < n + 1; j++){
				int dx = p[i].x - p[j].x;
				int dy = p[i].y - p[j].y;

				int distance = dx*dx + dy*dy;

				int[] pair2 = new int[3];
				pair2[0] = distance;
				pair2[1] = i;
				pair2[2] = j;

				pair.add(pair2);
			}
		}
//		 Arrays.sort(p, new Comparator<Point>(){
//
//			@Override
//			public int compare(Point o1, Point o2) {
//				// TODO Auto-generated method stub
//				int d1 =  o1.x*o1.x + o1.y*o1.y;
//				int d2 = o2.x*o2.x + o2.y*o2.y;
//				return  d1 - d2;
//			}
//		 });
		Collections.sort(pair,new Comparator<int[]>() {
            public int compare(int[] strings, int[] otherStrings) {
                return strings[0] - otherStrings[0];
           }
        });
       
		 int[] pbest = new int[n + 1];
		 int[] best = new int[n + 1];
		 int[] pdist = new int[n + 1];
		 for(int i = 0; i < pair.size(); i++){
			 int d = pair.get(i)[0];
			 int a = pair.get(i)[1];
			 int b = pair.get(i)[2];
				if(d>pdist[a])
				{
					pdist[a] = d;
					pbest[a] = best[a];
				}
				if(d>pdist[b])
				{
					pdist[b] = d;
					pbest[b] = best[b];
				}

				if(a == 0)
				{
					if(best[b] + 1 > best[a])
					{
						best[a] = best[b] + 1;
					}
				}
				else
				{
					if(pbest[b] + 1 > best[a])
					{
						best[a] = pbest[b] + 1;
					}
					if(pbest[a] + 1 > best[b])
					{
						best[b] = pbest[a] + 1;
					}
				}
		 }
		 System.out.println(best[0]);
		 
		 
		
		
		
	}

}
